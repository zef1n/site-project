from django.utils import timezone

from .forms import OrderForm
from django.shortcuts import render, redirect, get_object_or_404
from .models import Service
from .cart import Cart
import asyncio

import requests


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
def index(request):
    return render(request, 'index.html')


def catalog(request):
    services = Service.objects.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    return render(request, 'catalog.html', {'services': services})


def cart_add(request, service_id):
    cart = Cart(request)
    service = get_object_or_404(Service, id=service_id)
    cart.add(service=service)
    return redirect('services:cart_detail')


def cart_remove(request, service_id):
    cart = Cart(request)
    service = get_object_or_404(Service, id=service_id)
    cart.remove(service)
    return redirect('services:cart_detail')


def cart_detail(request):
    cart = Cart(request)

    if request.method == 'POST':
        form = OrderForm(request.POST)
        if form.is_valid():
            order_details = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∂–¥–æ–º —Ç–æ–≤–∞—Ä–µ

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–∫–∞–∑–∞
            order = form.save(commit=False)

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–æ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–æ—Ä–∑–∏–Ω–µ
            for item in cart:
                order.service = item['service']
                order.save()

                order_details.append(
                    f"üõ† –£—Å–ª—É–≥–∞: {item['service'].title} | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} | –°—É–º–º–∞: {item['total_price']} —Ä—É–±."
                )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            message = (
                    f"üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
                    f"üë§ –ò–º—è: {order.customer_name}\n"
                    f"üìß Email: {order.customer_email}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone_number}\n"
                    f"üí¨ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è —Å–æ—Ü—Å–µ—Ç—å: {order.get_preferred_network_display()}\n"
                    f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%Y-%m-%d %H:%M')}\n\n"
                    f"üìú –¢–æ–≤–∞—Ä—ã:\n" + "\n".join(order_details) + "\n\n"
                                                                f"üìú –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {order.additional_info if order.additional_info else '–ù–µ—Ç'}"
            )

            send_telegram_message(message)  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

            cart.clear()  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            return redirect('services:order_success')
    else:
        form = OrderForm()

    return render(request, 'cart_detail.html', {'cart': cart, 'form': form})


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
def send_telegram_message(message: str):
    bot_token = '7442945233:AAFcqTkImSRADz5IoZdK9zurLbyATDGopP0'
    chat_id = '-4509762134'  # ID —á–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞

    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': message,
        'parse_mode': 'HTML'
    }

    try:
        response = requests.post(url, data=payload)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ HTTP
        print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except requests.exceptions.HTTPError as err:
        print(f"–û—à–∏–±–∫–∞ HTTP: {err}")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# –í—ã–∑–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
def send_telegram_message_sync(message: str):
    asyncio.run(send_telegram_message(message))


from django.shortcuts import render, get_object_or_404
from .models import Post

from django.shortcuts import render, get_object_or_404
from .models import Post
from django.utils import timezone
from taggit.models import Tag
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger


def post_list(request, tag_slug=None):
    object_list = Post.objects.filter(published_date__lte=timezone.now())
    tag = None
    query = request.GET.get('q')

    if tag_slug:
        tag = get_object_or_404(Tag, slug=tag_slug)
        object_list = object_list.filter(tags__in=[tag])

    if query:
        object_list = object_list.filter(content__icontains=query) | object_list.filter(title__icontains=query)

    paginator = Paginator(object_list, 6)  # 6 –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page = request.GET.get('page')

    try:
        posts = paginator.page(page)
    except PageNotAnInteger:
        posts = paginator.page(1)
    except EmptyPage:
        posts = paginator.page(paginator.num_pages)

    return render(request, 'post_list.html', {'posts': posts, 'tag': tag, 'query': query})


def post_detail(request, slug):
    post = get_object_or_404(Post, slug=slug)
    return render(request, 'post_detail.html', {'post': post})
